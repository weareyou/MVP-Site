# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker
name: 0.1$(Rev:.r)


# trigger:
#   branches:
#     include:
#     - master
# Disabled because of updating the manifest file image versions.

resources:
- repo: self
  clean: true

variables:
  # Agent VM image name
  vmImageName: 'windows-latest'
  AZURE_SUBSCRIPTION: 'WAY Azure Internal 2.0'
  AZURE_CONTAINER_REGISTRY: 'waysc10aksacr.azurecr.io'
  AKS_SERVICE_ENDPOINT: 'way-sc10-aks-cluster'
  REGISTRY: $(AZURE_CONTAINER_REGISTRY)/
  keyvaultName: "way-sc10-aks-keyvault"
  #tag: "$(Build.BuildNumber)"
  tag: "0.1.35"
  forcePush: true # can be set in pipeline variables later

  STAGING_CD_HOST: mvp-cd.sc.global
  STAGING_CM_HOST: mvp-cm.sc.global
  STAGING_ID_HOST: mvp-id.sc.global
  STAGING_HOST: mvp.sc.global

stages:
- stage: Build
  displayName: Build Images + Push to ACR
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    # - task: DockerCompose@0
    #   displayName: "Build Images"
    #   inputs:
    #     containerregistrytype: 'Azure Container Registry'
    #     azureSubscriptionEndpoint: '$(AZURE_SUBSCRIPTION)'       
    #     azureContainerRegistry: '$(AZURE_CONTAINER_REGISTRY)'
    #     dockerComposeFile: '**/docker-compose.azdevops.yml'
    #     qualifyImageNames: false
    #     action: 'Build services'
    #     additionalImageTags: '$(tag)'
    #     includeLatestTag: true

    # - task: DockerCompose@0
    #   displayName: "Push Images with Latest Tag"
    #   inputs:
    #     containerregistrytype: 'Azure Container Registry'
    #     azureSubscriptionEndpoint: '$(AZURE_SUBSCRIPTION)'       
    #     azureContainerRegistry: '$(AZURE_CONTAINER_REGISTRY)'
    #     dockerComposeFile: '**/docker-compose.azdevops.yml'
    #     action: 'Push services'
    #     additionalImageTags: '$(tag)'
    #     includeLatestTag: true
    #   condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), contains(variables['forcePush'], 'true')))

    - task: CopyFiles@2
      displayName: "Copy K8s specifications to staging directory"
      inputs:
        SourceFolder: 'k8s/manifests'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/k8s-manifests'
        CleanTargetFolder: true

    - task: CopyFiles@2
      displayName: "Copy Serialisation assets to staging directory"
      inputs:
        SourceFolder: './'
        Contents: |
          sitecore.json
          src/**/*.module.json
          src/**/items/**
          .config/dotnet-tools.json
        TargetFolder: '$(Build.ArtifactStagingDirectory)/serialization'
        CleanTargetFolder: true

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(System.ArtifactsDirectory)'
        artifact: 'Sitecore.MVP-$(Build.BuildNumber)' 

- stage: Deploy
  dependsOn: Build
  displayName: Deploy to Staging
  jobs:
  - deployment: 'Deploy_to_Staging_AKS'
    pool:
      vmImage: $(vmImageName)
    environment: Staging
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            displayName: "Download Build Artifact"
            inputs:
              artifact: Sitecore.MVP-$(Build.BuildNumber)
              targetPath: '$(System.ArtifactsDirectory)'

          - task: AzureKeyVault@1
            displayName: 'Azure Key Vault: $(keyvaultName)'
            inputs:
              azureSubscription: '$(AZURE_SUBSCRIPTION)'
              KeyVaultName: $(keyvaultName)

          - task: Kubernetes@1
            displayName: Create Sitecore Namespace
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: '$(AKS_SERVICE_ENDPOINT)'
              command: 'apply'
              useConfigurationFile: true
              configuration: '$(System.ArtifactsDirectory)/k8s-manifests/staging/namespace/namespace.yaml'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
              outputFormat: ''

          - task: replacetokens@3
            displayName: "Replace Tokens in Secrets & Specs"
            inputs:
              rootDirectory: '$(System.ArtifactsDirectory)/k8s-manifests/staging/'
              targetFiles: |
                **/*.txt
                **/*.crt
                **/*.key
                **/*.yaml
              encoding: 'auto'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: true
              tokenPrefix: '$('
              tokenSuffix: ')'
              useLegacyPattern: false
              enableTelemetry: false

## Replace with apply ?
          - task: KubernetesManifest@0
            displayName: Bake K8s Secrets
            name: 'bake'
            inputs:
              action: 'bake'
              renderType: 'kustomize'
              kustomizationPath: '$(System.ArtifactsDirectory)/k8s-manifests/staging/secrets/'

          - task: KubernetesManifest@0
            displayName: Deploy K8s Secrets
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: '$(AKS_SERVICE_ENDPOINT)'
              namespace: 'mvp-staging'
              manifests: '$(bake.manifestsBundle)'

## external specs not needed
          # - task: Kubernetes@1
          #   displayName: Deploy External Specifications
          #   inputs:
          #     connectionType: 'Kubernetes Service Connection'
          #     kubernetesServiceEndpoint: '$(AKS_SERVICE_ENDPOINT)'
          #     namespace: 'mvp-staging'
          #     command: 'apply'
          #     useConfigurationFile: true
          #     configuration: '$(System.ArtifactsDirectory)/k8s-specs/external'
          #     secretType: 'dockerRegistry'
          #     containerRegistryType: 'Azure Container Registry'
          #     outputFormat: ''

# Already exists in the init pipeline
# Contains the init's safe to run multiple times, doesn't override anything
# Fails because already exists

          # - task: Kubernetes@1
          #   displayName: Deploy Init Specifications
          #   inputs:
          #     connectionType: 'Kubernetes Service Connection'
          #     kubernetesServiceEndpoint: '$(AKS_SERVICE_ENDPOINT)'
          #     namespace: 'mvp-staging'
          #     command: 'apply'
          #     arguments: '-k ./'              
          #     workingDirectory: '$(System.ArtifactsDirectory)/k8s-manifests/staging/init'
          #     secretType: 'dockerRegistry'
          #     containerRegistryType: 'Azure Container Registry'
          #     outputFormat: ''

          - task: Kubernetes@1
            displayName: Deploy Ingress Specifications
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: '$(AKS_SERVICE_ENDPOINT)'
              namespace: 'mvp-staging'
              command: 'apply'
              arguments: '-k ./'              
              workingDirectory: '$(System.ArtifactsDirectory)/k8s-manifests/staging/ingress-nginx'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
              outputFormat: ''              

          - task: Kubernetes@1
            displayName: Deploy Volume Specifications
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: '$(AKS_SERVICE_ENDPOINT)'
              namespace: 'mvp-staging'
              command: 'apply'
              arguments: '-f ./'              
              workingDirectory: '$(System.ArtifactsDirectory)/k8s-manifests/staging/volumes/azurefile'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
              outputFormat: '' 

## Update the image versions in the kustomization file

          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: 'sed -i "s/newTag:.*/newTag: $(tag)/g" kustomization.yaml'
              workingDirectory: '$(System.ArtifactsDirectory)/k8s-manifests/staging'

## deploy using the -k option to apply kustomization.yaml

          - task: Kubernetes@1
            displayName: Deploy Application Specifications
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: '$(AKS_SERVICE_ENDPOINT)'
              namespace: 'mvp-staging'
              command: 'apply'
              arguments: '-k ./'
              workingDirectory: '$(System.ArtifactsDirectory)/k8s-manifests/staging'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
              outputFormat: ''


  # - deployment: 'Deserialize_Content_to_Staging'
  #   dependsOn: 'Deploy_to_Staging_AKS'
  #   pool:
  #     vmImage: $(vmImageName)
  #   environment: Staging
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: DownloadPipelineArtifact@2
  #           displayName: "Download Build Artifact"
  #           inputs:
  #             artifact: Sitecore.MVP-$(Build.BuildNumber)
  #             targetPath: '$(System.ArtifactsDirectory)'
  #         - task: PowerShell@2
  #           displayName: Deserialize Content
  #           inputs:
  #             targetType: 'inline'
  #             script: |
  #               # Add nuget source & install Sitecore CLI
  #               Write-Host "Installing Sitecore CLI"
  #               dotnet nuget add source $(SITECORE_PUBLIC_NUGET_FEED) --name "Sitecore-Public-Nuget-Feed"
  #               dotnet tool install --add-source=$(SITECORE_PUBLIC_NUGET_FEED) --version 2.0.0 sitecore.cli
                
  #               # Login to ID Server
  #               Write-Host "Logging into ID Server"
  #               dotnet sitecore login --client-credentials true --auth $(ID_SERVER_URL) --cm $(CM_URL) --allow-write true --client-id "MVP_Automation" --client-secret "$(SITECORE_MVP_IDENTITY_SECRET)"
                
  #               # Deserialize Content
  #               Write-Host "Push Content"
  #               dotnet sitecore ser push
                
  #               # Publish Database
  #               Write-Host "Publish Database"
  #               dotnet sitecore publish
  #             workingDirectory: '$(System.ArtifactsDirectory)/serialization'